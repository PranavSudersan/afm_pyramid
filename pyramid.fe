//pyramid.fe
// A triangular pyramid shaped tip in contact with a liquid drop
//Center of bottom suubstrate is the origin of the coordinate system, vertically below the tip
//Pyramid tip is at 'height' distance above surface
//Contact angle of liquid with pyramid and bottom substrate are given by angle_p and angle_s respectively

//COMMENT "height" ,"CA_p" an "Rs" PARAMETERS WHEN RUNNING fd_series SCRIPT! UNCOMMENT THEM WHEN RUNNING THIS FILE!
//ALWAYS RERUN THIS FILE, THEN COMMENTS ABOVE PARAMETERS BEFORE RUNNING EXTERNAL SCRIPTS
parameter height = 0 // distance of pyramid tip from surface
parameter CA_p = 10 * pi/180 //liquid contact angle with pyramid tip
parameter Rs = 2.0 //pinned radius at substrate (REMOVE CONTACT ANGLE ENERGY CONSTRAINT 1)
parameter a_dev = 10 //deviation in pyramid geometry angle

parameter w_top =  3 //height of dummy pyramid (only for reference)
//define initial value expression by trial and error for different CA_p value and fitting them
parameter w_init = (2/Rs)-height//(((3.492e-5)*((CA_p*180/pi)^2))-(0.00814*(CA_p*180/pi))+0.914) - height  //initial wetted height of the pyramid


parameter SA = (0 + a_dev) * pi/180 //Side angle of pyramid 17.5
parameter FA = (0 + a_dev) * pi/180 //Front angle of pyramid 15
parameter BA = (0 + a_dev) * pi/180 //Back angle of pyramid 25
parameter tilt = 0 * pi/180 //tilt pyramid around x-axis


parameter TENS = 1 //suface tension of liquid
parameter CA_s = 30 * pi/180 //liquid contact angle with surface (REMOVE PINNED CONTACT ONSTRAINT 14)


gravity_constant 0  // start with gravity off
//scale_limit 0.1
keep_macros

//rotate display
parameter alpha = 20*pi/180 //rotate view around z-axis
parameter beta = 15*pi/180 //rotate view around y-axis
parameter gamma = 0*pi/180 //rotate view around x-axis

//rotation matrix (https://en.wikipedia.org/wiki/Rotation_matrix)
view_matrix 
cos(alpha)*cos(beta) cos(alpha)*sin(beta)*sin(gamma)-sin(alpha)*cos(gamma) cos(alpha)*sin(beta)*cos(gamma)+sin(alpha)*sin(gamma) 0
sin(alpha)*cos(beta) sin(alpha)*sin(beta)*sin(gamma)+cos(alpha)*cos(gamma) sin(alpha)*sin(beta)*cos(gamma)-cos(alpha)*sin(gamma) 0
-sin(beta) cos(beta)*sin(gamma) cos(beta)*cos(gamma) -1
0 0 0 1.7

//surface energy of substrate and pyramid
#define TENS_s (-TENS*(cos(CA_s)))
#define TENS_p (-TENS*(cos(CA_p)))

/* COMPUTE QUANTITIES */

quantity upper_length info_only method edge_scalar_integral  // top contact length
scalar_integrand: 1

quantity upper_length6 info_only method edge_scalar_integral  // top contact length
scalar_integrand: 1

quantity upper_length7 info_only method edge_scalar_integral  // top contact length
scalar_integrand: 1

quantity upper_length8 info_only method edge_scalar_integral  // top contact length
scalar_integrand: 1

quantity upper_length9 info_only method edge_scalar_integral  // top contact length
scalar_integrand: 1

quantity lower_length info_only method edge_scalar_integral  // bottom contaact length
scalar_integrand: 1

quantity upper_area info_only method edge_vector_integral  // top contact area WRONG!
vector_integrand:
q1: 0
q2: x
q3: 0

quantity lower_area info_only method edge_vector_integral  // bottom contact area
vector_integrand:
q1: 0
q2: x
q3: 0

quantity mean_c info_only method mean_curvature_integral  // mean curvature

///* BOUNDARIES */
//
boundary 1 parameters 1 convex// bottom pinned contact
x1: Rs * cos(p1)
x2: Rs * sin(p1)
x3: 0

//boundary 1 parameters 1 // edge 13
//x1: -p1 * tan(SA)
//x2: -p1 * tan(FA)
//x3: p1 + height
//
//boundary 2 parameters 1 // edge 14
//x1: p1 * tan(SA)
//x2: -p1 * tan(FA)
//x3: p1 + height
//
//boundary 3 parameters 1 // edge 15
//x1: p1 * tan(SA)
//x2: p1 * tan(BA)
//x3: p1 + height
//
//boundary 4 parameters 1 // edge 16
//x1: -p1 * tan(SA)
//x2: p1 * tan(BA)
//x3: p1 + height

/* CONSTRAINTS */

constraint 1   // substrate face
formula: z = 0
//energy: //uncomment to consider oontact angle CHECK! keep if pinning
//e1: 0
//e2: TENS_s * x
//e3: 0

constraint 14 convex// pinning at substrate CHECK! remove if no pinning
formula: x^2 + y^2 = Rs^2

// fix edge center vertex at pyramid for correct calculation of line integrals
constraint 26
formula: x = 0

constraint 36
formula: y = 0

//pyramid tip plane constraints
constraint 2 // face 6
//formula: y + (z-height)*tan(FA) = 0
//formula: (y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(FA) = 0
formula: y*(cos(tilt)-sin(tilt)*tan(FA)) + (z-height)*(sin(tilt)+cos(tilt)*tan(FA)) = 0
energy:
//e1: TENS_p*(1/(1*cos(FA)))*(z-height+(x/tan(SA)))
e1: TENS_p*(1/(1*cos(FA+tilt)))*(z-height+((x/tan(SA))*(cos(tilt)-tan(FA)*sin(tilt))))
e2: 0
e3: 0
//energy:
//e1: 0
//e2: TENS_p*0.5*x/sin(FA)
//e3: -TENS_p*0.5*x/cos(FA)
content:
//c1: height*y - ((y^2)/(2*tan(FA)))
//c1: (-z*(tan(FA)))*(z-height+(x/tan(SA)))
//c1: -(0.5*(tan(FA)))*((z^2)-(height+(x/tan(SA))^2))
c1: -(0.5*(tan(FA+tilt)))*((z^2)-(height+((x/tan(SA))*(cos(tilt)-tan(FA)*sin(tilt)))^2))
c2: 0
c3: 0

constraint 25 // face 6
//formula: y + (z-height)*tan(FA) = 0
//formula: (y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(FA) = 0
formula: y*(cos(tilt)-sin(tilt)*tan(FA)) + (z-height)*(sin(tilt)+cos(tilt)*tan(FA)) = 0
energy:
//e1: TENS_p*(1/(1*cos(FA)))*(z-height-(x/tan(SA)))
e1: TENS_p*(1/(1*cos(FA+tilt)))*(z-height-((x/tan(SA))*(cos(tilt)-tan(FA)*sin(tilt))))
e2: 0
e3: 0
//energy:
//e1: 0
//e2: TENS_p*0.5*x/sin(FA)
//e3: -TENS_p*0.5*x/cos(FA)
content:
//c1: height*y - ((y^2)/(2*tan(FA)))
//c1: (-z*(tan(FA)))*(z-height-(x/tan(SA)))
//c1: -(0.5*(tan(FA)))*((z^2)-(height+(x/tan(SA))^2))
c1: -(0.5*(tan(FA+tilt)))*((z^2)-(height+((x/tan(SA))*(cos(tilt)-tan(FA)*sin(tilt)))^2))
c2: 0
c3: 0

constraint 3 // face 7
//formula: -x + (z-height)*tan(SA) = 0
//formula: -x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA) = 0
formula: -x - (y*sin(tilt)*tan(SA)) + (z-height)*(cos(tilt)*tan(SA)) = 0
energy:
e1: 0
//e2: TENS_p*(1/(1*cos(SA)))*(z-height+(y/tan(FA)))
e2: TENS_p*(1/cos(SA))*(z-height+((y/(tan(FA)*cos(tilt)+sin(tilt)))*(cos(tilt)-tan(FA)*sin(tilt))))
e3: 0
//energy:
//e1: -TENS_p*0.5*y/sin(SA)
//e2: -TENS_p*0.5*y/cos(SA)
//e3: 0
content:
c1: 0
//c2: -height*x - ((x^2)/(2*tan(SA)))
//c2: (-z*(tan(SA)))*(z-height+(y/tan(FA)))
//c2: -(0.5*(tan(SA)))*((z^2)-(height+(y/tan(FA))^2))
c2: -(0.5*(tan(SA)))*((z^2)-(height+((y/(tan(FA)*cos(tilt)+sin(tilt)))*(cos(tilt)-tan(FA)*sin(tilt)))^2))
c3: 0

constraint 35 // face 7
//formula: -x + (z-height)*tan(SA) = 0
//formula: -x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA) = 0
formula: -x - (y*sin(tilt)*tan(SA)) + (z-height)*(cos(tilt)*tan(SA)) = 0
energy:
e1: 0
//e2: TENS_p*(1/(1*cos(SA)))*(z-height-(y/tan(BA)))
e2: TENS_p*(1/cos(SA))*(z-height-((y/(tan(BA)*cos(tilt)-sin(tilt)))*(cos(tilt)+tan(BA)*sin(tilt))))
e3: 0
//energy:
//e1: -TENS_p*0.5*y/sin(SA)
//e2: -TENS_p*0.5*y/cos(SA)
//e3: 0
content:
c1: 0
//c2: -height*x - ((x^2)/(2*tan(SA)))
//c2: (-z*(tan(SA)))*(z-height-(y/tan(BA)))
//c2: -(0.5*(tan(SA)))*((z^2)-(height+(y/tan(BA))^2))
c2: -(0.5*(tan(SA)))*((z^2)-(height+((y/(tan(BA)*cos(tilt)-sin(tilt)))*(cos(tilt)+tan(BA)*sin(tilt)))^2))
c3: 0

constraint 4 // face 8
//formula: -y + (z-height)*tan(BA) = 0
//formula: -(y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(BA) = 0
formula: -y*(cos(tilt)+sin(tilt)*tan(BA)) + (z-height)*(-sin(tilt)+cos(tilt)*tan(BA)) = 0
energy:
//e1: -TENS_p*(1/(1*cos(BA)))*(z-height-(x/tan(SA)))
e1: -TENS_p*(1/(1*cos(BA-tilt)))*(z-height-((x/tan(SA))*(cos(tilt)+tan(BA)*sin(tilt))))
e2: 0
e3: 0
//energy:
//e1: 0
//e2: TENS_p*0.5*x/sin(BA)
//e3: TENS_p*0.5*x/cos(BA)
content:
//c1: height*y + ((y^2)/(2*tan(BA)))
//c1: (z*(tan(BA)))*(z-height-(x/tan(SA)))
//c1: (0.5*(tan(BA)))*((z^2)-(height+(x/tan(SA))^2))
c1: (0.5*(tan(BA-tilt)))*((z^2)-(height+((x/tan(SA))*(cos(tilt)+tan(BA)*sin(tilt)))^2))
c2: 0
c3: 0

constraint 45 // face 8
//formula: -y + (z-height)*tan(BA) = 0
//formula: -(y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(BA) = 0
formula: -y*(cos(tilt)+sin(tilt)*tan(BA)) + (z-height)*(-sin(tilt)+cos(tilt)*tan(BA)) = 0
energy:
//e1: -TENS_p*(1/(1*cos(BA)))*(z-height+(x/tan(SA)))
e1: -TENS_p*(1/(1*cos(BA-tilt)))*(z-height+((x/tan(SA))*(cos(tilt)+tan(BA)*sin(tilt))))
e2: 0
e3: 0
//energy:
//e1: 0
//e2: TENS_p*0.5*x/sin(BA)
//e3: TENS_p*0.5*x/cos(BA)
content:
//c1: height*y + ((y^2)/(2*tan(BA)))
//c1: (z*(tan(BA)))*(z-height+(x/tan(SA)))
//c1: (0.5*(tan(BA)))*((z^2)-(height+(x/tan(SA))^2))
c1: (0.5*(tan(BA-tilt)))*((z^2)-(height+((x/tan(SA))*(cos(tilt)+tan(BA)*sin(tilt)))^2))
c2: 0
c3: 0

constraint 5 // face 9
//formula: x + (z-height)*tan(SA) = 0
//formula: x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA) = 0
formula: x - (y*sin(tilt)*tan(SA)) + (z-height)*(cos(tilt)*tan(SA)) = 0
energy:
e1: 0
//e2: -TENS_p*(1/(1*cos(SA)))*(z-height-(y/tan(BA)))
e2: -TENS_p*(1/cos(SA))*(z-height-((y/(tan(BA)*cos(tilt)-sin(tilt)))*(cos(tilt)+tan(BA)*sin(tilt))))
e3: 0
//energy:
//e1: -TENS_p*y/sin(SA)
//e2: 0
//e3: TENS_p*y/cos(SA)
content:
c1: 0
//c2: -height*x + ((x^2)/(2*tan(SA)))
//c2: (z*(tan(SA)))*(z-height-(y/tan(BA)))
//c2: (0.5*(tan(SA)))*((z^2)-(height+(y/tan(BA))^2))
c2: (0.5*(tan(SA)))*((z^2)-(height+((y/(tan(BA)*cos(tilt)-sin(tilt)))*(cos(tilt)+tan(BA)*sin(tilt)))^2))
c3: 0

constraint 55 // face 9
//formula: x + (z-height)*tan(SA) = 0
formula: x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA) = 0
energy:
e1: 0
//e2: -TENS_p*(1/(1*cos(SA)))*(z-height+(y/tan(FA)))
e2: -TENS_p*(1/cos(SA))*(z-height+((y/(tan(FA)*cos(tilt)+sin(tilt)))*(cos(tilt)-tan(FA)*sin(tilt))))
e3: 0
//energy:
//e1: -TENS_p*y/sin(SA)
//e2: 0
//e3: TENS_p*y/cos(SA)
content:
c1: 0
//c2: -height*x + ((x^2)/(2*tan(SA)))
//c2: (z*(tan(SA)))*(z-height+(y/tan(FA)))
//c2: (0.5*(tan(SA)))*((z^2)-(height+(y/tan(FA))^2))
c2: (0.5*(tan(SA)))*((z^2)-(height+((y/(tan(FA)*cos(tilt)+sin(tilt)))*(cos(tilt)-tan(FA)*sin(tilt)))^2))
c3: 0

//keep liquid outside pyramid
constraint 6 nonpositive // face 1
//formula: y + (z-height)*tan(FA)
//formula: (y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(FA)
formula: y*(cos(tilt)-sin(tilt)*tan(FA)) + (z-height)*(sin(tilt)+cos(tilt)*tan(FA))

constraint 7 nonpositive // face 2
//formula: -x + (z-height)*tan(SA)
//formula: -x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA)
formula: -x - (y*sin(tilt)*tan(SA)) + (z-height)*(cos(tilt)*tan(SA))

constraint 8 nonpositive // face 3
//formula: -y + (z-height)*tan(BA)
//formula: -(y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(BA)
formula: -y*(cos(tilt)+sin(tilt)*tan(BA)) + (z-height)*(-sin(tilt)+cos(tilt)*tan(BA))

constraint 9 nonpositive // face 4
//formula: x + (z-height)*tan(SA)
//formula: x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA)
formula: x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA)

//keep centers on pyramid
constraint 27 // face 6
//formula: y + (z-height)*tan(FA)
//formula: (y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(FA) = 0
formula: y*(cos(tilt)-sin(tilt)*tan(FA)) + (z-height)*(sin(tilt)+cos(tilt)*tan(FA)) = 0

constraint 37 // face 7
//formula: -x + (z-height)*tan(SA)
//formula: -x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA) = 0
formula: -x - (y*sin(tilt)*tan(SA)) + (z-height)*(cos(tilt)*tan(SA)) = 0

constraint 47 // face 8
//formula: -y + (z-height)*tan(BA)
//formula: -(y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(BA) = 0
formula: -y*(cos(tilt)+sin(tilt)*tan(BA)) + (z-height)*(-sin(tilt)+cos(tilt)*tan(BA)) = 0

constraint 57 // face 9
//formula: x + (z-height)*tan(SA)
//formula: x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA) = 0
formula: x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA) = 0


//pyramid tip constraints
constraint 10 
formula: x = 0

constraint 11 
formula: y = 0

constraint 12 
formula: z = height

//keep liquid above substrate
constraint 13 nonnegative 
formula: z

//keep liquid between faces
constraint 15 nonnegative // face 6
//formula: y + (z-height)*tan(FA)
//formula: (y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(FA)
formula: y*(cos(tilt)-sin(tilt)*tan(FA)) + (z-height)*(sin(tilt)+cos(tilt)*tan(FA))

constraint 16 nonnegative // face 7
//formula: -x + (z-height)*tan(SA)
//formula: -x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA)
formula: -x - (y*sin(tilt)*tan(SA)) + (z-height)*(cos(tilt)*tan(SA))

constraint 17 nonnegative // face 8
//formula: -y + (z-height)*tan(BA)
//formula: -(y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(BA)
formula: -y*(cos(tilt)+sin(tilt)*tan(BA)) + (z-height)*(-sin(tilt)+cos(tilt)*tan(BA))

constraint 18 nonnegative // face 9
//formula: x + (z-height)*tan(SA)
//formula: x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA)
formula: x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA)

//constraint 19 // edge 13
//formula: x + y + (tan(SA)+tan(FA))*(z-height) = 0
//
//constraint 20 // edge 14
//formula: x + y + (tan(FA)-tan(SA))*(z-height) = 0
//
//constraint 21 // edge 15
//formula: x + y - (tan(SA)+tan(BA))*(z-height) = 0
//
//constraint 22 // edge 16
//formula: x + y + (tan(SA)-tan(BA))*(z-height) = 0

// for restoring after perturbation
define vertex attribute old_coord real[3]

/* INITIAL SHAPE SPECIFICATION */

vertices
//liquid bottom substrate (CHECK! include pinning/contact angle constraints 14)
//1 -Rs -Rs 0 constraint 1 //substrate contact angle
//2 Rs -Rs 0 constraint 1
//3 Rs Rs 0 constraint 1
//4 -Rs Rs 0 constraint 1
1 5*pi/4 boundary 1 //pinnned contact (bottom)
2 -pi/4 boundary 1
3 pi/4 boundary 1
4 3*pi/4 boundary 1
//5 -w_init*tan(SA) -w_init*tan(FA) height+w_init constraint 2,5 //pyramid contact line
//6 w_init*tan(SA) -w_init*tan(FA) height+w_init constraint 2,3
//7 w_init*tan(SA) w_init*tan(BA) height+w_init constraint 3,4
//8 -w_init*tan(SA) w_init*tan(BA) height+w_init constraint 4,5
//5 w_init boundary 1
//6 w_init boundary 2
//7 w_init boundary 3
//8 w_init boundary 4
 //pyramid contact line
 5 -w_init*tan(SA) (-w_init*tan(FA))*cos(tilt)-(w_init)*sin(tilt) (-w_init*tan(FA))*sin(tilt)+(w_init)*cos(tilt)+height  constraint 57,27
 55 0 (-w_init*tan(FA))*cos(tilt)-(w_init)*sin(tilt) (-w_init*tan(FA))*sin(tilt)+(w_init)*cos(tilt)+height  constraint 27,26
 6 w_init*tan(SA) (-w_init*tan(FA))*cos(tilt)-(w_init)*sin(tilt) (-w_init*tan(FA))*sin(tilt)+(w_init)*cos(tilt)+height  constraint 27,37
 //65 w_init*tan(SA) -(height+w_init)*sin(tilt) (w_init*tan(BA))*sin(tilt)+(height+w_init)*cos(tilt)  constraint 37,36
 65 w_init*tan(SA) (0.5*w_init*(tan(BA)-tan(FA)))*cos(tilt)-(w_init)*sin(tilt) (w_init*tan(BA))*sin(tilt)+(w_init)*cos(tilt)+height  constraint 37,36
 7 w_init*tan(SA) (w_init*tan(BA))*cos(tilt)-(w_init)*sin(tilt) (w_init*tan(BA))*sin(tilt)+(w_init)*cos(tilt)+height  constraint 37,47
 75 0 (w_init*tan(BA))*cos(tilt)-(w_init)*sin(tilt) (w_init*tan(BA))*sin(tilt)+(w_init)*cos(tilt)+height  constraint 47,26
 8 -w_init*tan(SA) (w_init*tan(BA))*cos(tilt)-(w_init)*sin(tilt) (w_init*tan(BA))*sin(tilt)+(w_init)*cos(tilt)+height  constraint 47,57
 //85 -w_init*tan(SA) -(height+w_init)*sin(tilt) (w_init*tan(BA))*sin(tilt)+(height+w_init)*cos(tilt)  constraint 57,36
 85 -w_init*tan(SA) (0.5*w_init*(tan(BA)-tan(FA)))*cos(tilt)-(w_init)*sin(tilt) (w_init*tan(BA))*sin(tilt)+(w_init)*cos(tilt)+height  constraint 57,36
 //9 0 0 height constraint 10,11,12
//pyramid
//10 -w_top*tan(SA) -w_top*tan(FA) height+w_top fixed
//11 w_top*tan(SA) -w_top*tan(FA) height+w_top fixed
//12 w_top*tan(SA) w_top*tan(BA) height+w_top fixed
//13 -w_top*tan(SA) w_top*tan(BA) height+w_top fixed
10 -w_top*tan(SA) (-w_top*tan(FA))*cos(tilt)-(w_top)*sin(tilt) (-w_top*tan(FA))*sin(tilt)+(w_top)*cos(tilt)+height fixed
11 w_top*tan(SA) (-w_top*tan(FA))*cos(tilt)-(w_top)*sin(tilt) (-w_top*tan(FA))*sin(tilt)+(w_top)*cos(tilt)+height fixed
12 w_top*tan(SA) (w_top*tan(BA))*cos(tilt)-(w_top)*sin(tilt) (w_top*tan(BA))*sin(tilt)+(w_top)*cos(tilt)+height fixed
13 -w_top*tan(SA) (w_top*tan(BA))*cos(tilt)-(w_top)*sin(tilt) (w_top*tan(BA))*sin(tilt)+(w_top)*cos(tilt)+height fixed
14 0 0 height fixed

edges
//liquid
1 1 2 constraint 1,14 lower_length lower_area mean_c //bottom substrate (CHECK! include pinning/contact angle constraints 14)
2 2 3 constraint 1,14 lower_length lower_area mean_c
3 3 4 constraint 1,14 lower_length lower_area mean_c
4 4 1 constraint 1,14 lower_length lower_area mean_c
5 5 55 constraint 2,16,18 upper_length6 upper_length upper_area mean_c //pyramid top contact line
55 55 6 constraint 25,16,18 upper_length6 upper_length upper_area mean_c
6 6 65 constraint 3,15,17 upper_length7 upper_length upper_area mean_c
65 65 7 constraint 35,15,17 upper_length7 upper_length upper_area mean_c
7 7 75 constraint 4,16,18 upper_length8 upper_length upper_area mean_c
75 75 8 constraint 45,16,18 upper_length8 upper_length upper_area mean_c
8 8 85 constraint 5,15,17 upper_length9 upper_length upper_area mean_c
85 85 5 constraint 55,15,17 upper_length9 upper_length upper_area mean_c
9 1 5 constraint 13,9,6 mean_c//liquid-air interface
10 2 6 constraint 13,6,7 mean_c
11 3 7 constraint 13,7,8 mean_c
12 4 8 constraint 13,8,9 mean_c
//13 9 5 constraint 2,5 //edge of pyramid tip
//14 9 6 constraint 2,3
//15 9 7 constraint 3,4
//16 9 8 constraint 4,5
//pyramid
17 10 11 fixed no_refine 
18 11 12 fixed no_refine 
19 12 13 fixed no_refine 
20 13 10 fixed no_refine
21 14 10 fixed no_refine //edge of pyramid tip
22 14 11 fixed no_refine
23 14 12 fixed no_refine
24 14 13 fixed no_refine

faces
//liquid
1 1 10 -55 -5 -9 constraint 6  tension TENS color yellow //air-liquid interface
2 2 11 -65 -6 -10 constraint 7 tension TENS color yellow
3 3 12 -75 -7 -11 constraint 8 tension TENS color yellow
4 4 9 -85 -8 -12 constraint 9 tension TENS color yellow
//5 -1 -4 -3 -2 tension -0.8  constraint 1 color yellow //contact with substrate
//6 13 5 -14 tension TENS_p constraint 2 color yellow //contact with pyramid tip
//7 14 6 -15 tension TENS_p constraint 3 color yellow
//8 15 7 -16 tension TENS_p constraint 4 color yellow
//9 16 8 -13 tension TENS_p constraint 5 color yellow
//pyramid
10 21 17 -22 fixed no_refine tension 0 color red
11 22 18 -23 fixed no_refine tension 0 color red
12 23 19 -24 fixed no_refine tension 0 color red
13 24 20 -21 fixed no_refine tension 0 color red
//14 17 18 19 20 fixed no_refine tension 0 color red

bodies
    1   1 2 3 4 volume 4*pi/3 density 1
    
//----------------------SCRIPT----------------------//

read

//clear edge lines of fluid
clear_lines := {
                set edge color clear where on_constraint 6 or on_constraint 7 or 
                            on_constraint 8 or on_constraint 9;
                }

//compute contact angle of liquid at pinned contact line
compute_angle_bottom := {
    angle_sum := 0;
    ind := 0;
    foreach vertex vv where on_constraint 1 do
        {   
            if vv.vertex_normal[1]*vv.x > 0 or vv.vertex_normal[2]*vv.y > 0 then 
            {angle_sum := angle_sum+acos(vv.vertex_normal[3]);}
            else
            {angle_sum := angle_sum-acos(vv.vertex_normal[3]);};
            ind++;
        };
        pin_angle := (angle_sum/ind);//take average
        //print pin_angle*180/pi;
        }

//TODO: check angles
//compute contact angle of liquid top contact line with z axis
function real get_angle(real c_num) //c_num: constraint number of edge
    {
    angle_sum := 0;
    ind := 0;
    foreach edge ee where on_quantity upper_length and on_constraint c_num do
        {   
            angle_temp := acos(ee.vertices[1].vertex_normal[3]);
            if ee.vertices[1].vertex_normal[1]*ee.vertices[1].x > 0 or ee.vertices[1].vertex_normal[2]*ee.vertices[1].y > 0 then 
            {angle_sum := angle_sum + angle_temp;}
            else
            {angle_sum := angle_sum - angle_temp;};
            ind++;
        };
    angle1 := (angle_sum/ind)*180/pi;//take average
    //print angle1*180/pi;
    return angle1;
//    angle_sum := 0;
//    ind := 0;
//    foreach facet ff where on_constraint c_num do
//        {   
//            angle_temp := acos(ff.vertices[1].vertex_normal[3]);
//            if ff.vertices[1].vertex_normal[1]*ff.vertices[1].x > 0 or ff.vertices[1].vertex_normal[2]*ff.vertices[1].y > 0 then 
//            {angle_sum := angle_sum + angle_temp;}
//            else
//            {angle_sum := angle_sum - angle_temp;};
//            ind++;
//        };
//        angle2 := (angle_sum/ind);//take average
//        print angle2*180/pi;
//        
//    top_angle := (angle2 - angle1)*180/pi;
//    print top_angle;
//    return top_angle;
        
        }


compute_angle_top := {
    angle6 := 90 + (FA*180/pi) - ((get_angle(2)+get_angle(25))*0.5) + (tilt*180/pi); //face 6
    angle7 := 90 + (SA*180/pi) - ((get_angle(3)+get_angle(35))*0.5); //face 7
    angle8 := 90 + (BA*180/pi) - ((get_angle(4)+get_angle(45))*0.5)- (tilt*180/pi); //face 8
    angle9 := 90 + (SA*180/pi) - ((get_angle(5)+get_angle(55))*0.5); //face 9
    printf "%g\t%g\t%g\t%g\t", angle6,angle7,angle8,angle9;
                      }

compute_wetted_height := {
    h1 := max(vertices where on_constraint 2 or on_constraint 25,z);
    h2 := max(vertices where on_constraint 3 or on_constraint 35,z);
    h3 := max(vertices where on_constraint 4 or on_constraint 45,z);
    h4 := max(vertices where on_constraint 5 or on_constraint 55,z);
    wetted_height := (h1+h2+h3+h4)/4; //average wetted height
                            }
//change height
new_height := height //set new_height and run change_height
change_height := { old_height := height; dz := new_height - old_height; height := new_height;
    set vertex z z+dz where z > 0 and (not on_constraint 6 and not on_constraint 7 and not on_constraint 8 and not on_constraint 9);
    set vertex z z*(new_height+w_init)/(old_height+w_init) where on_constraint 6 or on_constraint 7 or on_constraint 8 or on_constraint 9;
               recalc;
             }

           
//change Rs (bottom pin radius)
new_Rs := Rs //set new_Rs and run change_Rs
change_Rs := { dRs := (new_Rs - Rs)/(2*sqrt(2)); Rs := new_Rs;
               set vertex y y-dRs where on_constraint 6;
               set vertex x x+dRs where on_constraint 7;
               set vertex y y+dRs where on_constraint 8;
               set vertex x x-dRs where on_constraint 9;
               recalc;
             }       

//special refine routines       
re := { refine edges where on_constraint 1;}

re_top := { refine edges where on_constraint 2; refine edges where on_constraint 25;
            refine edges where on_constraint 3; refine edges where on_constraint 35;
            refine edges where on_constraint 4; refine edges where on_constraint 45;
            refine edges where on_constraint 5; refine edges where on_constraint 55;}
        
//refine top facets    
re_top2 := {foreach edge ee where on_quantity upper_length do 
    {refine ee.facets;};
         }

//refine bottom facets    
re_bottom := {foreach edge ee where on_quantity lower_length do 
    {refine ee.facets;};
         }

//refine top face edges
re_top3 := { 
    foreach vertices vv where on_constraint 27 and on_constraint 57  do {
        //printf "%g %g %g\\n",x,y,z; 
    refine vv.edges where length == max(vv.edges,length);
    }; 
    foreach vertices vv where on_constraint 27 and on_constraint 37  do {
        //printf "%g %g %g\\n",x,y,z; 
    refine vv.edges where length == max(vv.edges,length);
    };
    foreach vertices vv where on_constraint 37 and on_constraint 47  do {
        //printf "%g %g %g\\n",x,y,z; 
    refine vv.edges where length == max(vv.edges,length);
    };
    foreach vertices vv where on_constraint 47 and on_constraint 57  do {
        //printf "%g %g %g\\n",x,y,z; 
    refine vv.edges where length == max(vv.edges,length);
    };
         }

//refine top large faces 
re_top4 := {
    foreach vertices vv where on_constraint 27 or on_constraint 57 or on_constraint 37 or on_constraint 47 do {
        //printf "%g %g %g\\n",x,y,z; //list vv.facets; 
        foreach vv.facets ff do {
            vv_count := count(ff.edges where not on_quantity upper_length, id);
            if vv_count == 3 then {refine ff;};
                }; 
            }; 
//    foreach vertices vv where on_constraint 27 and on_constraint 57  do {
//        printf "%g %g %g\\n",x,y,z; //list vv.facets; 
//        foreach vv.facets ff do {
//            vv_count := count(ff.edges where not on_quantity upper_length, id);
//            if vv_count == 3 then {refine ff;};
//                }; 
//            }; 
//    foreach vertices vv where on_constraint 27 and on_constraint 37  do {
//        printf "%g %g %g\\n",x,y,z; //list vv.facets; 
//        foreach vv.facets ff do {
//            vv_count := count(ff.edges where not on_quantity upper_length, id);
//            if vv_count == 3 then {refine ff;};
//                }; 
//            };
//    foreach vertices vv where on_constraint 37 and on_constraint 47  do {
//        printf "%g %g %g\\n",x,y,z; //list vv.facets; 
//        foreach vv.facets ff do {
//            vv_count := count(ff.edges where not on_quantity upper_length, id);
//            if vv_count == 3 then {refine ff;};
//                }; 
//            };
//    foreach vertices vv where on_constraint 47 and on_constraint 57  do {
//        printf "%g %g %g\\n",x,y,z; //list vv.facets; 
//        foreach vv.facets ff do {
//            vv_count := count(ff.edges where not on_quantity upper_length, id);
//            if vv_count == 3 then {refine ff;};
//                }; 
//            };
    }


//refine edge where length > .0048 and not no_refine;

//Evolve scripts

gogo1 := {re;
        g5; r; g10; r; g20; r; g40; r; u; g100;
        scale_val := scale;
        compute_angle_top; compute_angle_bottom;
        compute_wetted_height;
        }

//better evolve routine
gogo2 := {re; g5; 
        {r; u; V; g 10;} 3;
        g100;U;g100;U;
        scale_val := scale;
        compute_angle_top; compute_angle_bottom;
        compute_wetted_height;
        }
    //use for small Rs    
gogo3 := {re;re_top3; re_bottom;re;re_top2;g30; 
    {r; u; V; g 10;} 3; {r; V;U;g50;U;} 1;//re_top3; u; V;
    //g1000;
    V;U;g100;U;
        scale_val := scale;
        compute_angle_top; compute_angle_bottom;
        compute_wetted_height;
        }

//use for large Rs
gogo5 := {re_bottom;re;re_top3; re_top4;re_top3; re_top4;re_top2;re_bottom;re;g100;re_top; 
    {r; u; V; g 100;} 3;//re_bottom;re;{r; u; V; g 100;} 2;//re_top;{r;u;V;g100;} 1;//re_top3; u; V;
    //g1000;
    U;g300;U;
        scale_val := scale;
        compute_angle_top; compute_angle_bottom;
        compute_wetted_height;
        }

//use for small Rs
gogo6 := {g; re_bottom;re;re_top3; re_top4;re_top3; re_top4;re_top2;re_bottom;re;g100;re_top; 
    {r; u; V; g 100;} 3;//re_bottom;re;{r; u; V; g 100;} 2;//re_top;{r;u;V;g100;} 1;//re_top3; u; V;
    //g1000;
    U;g300;U;
        scale_val := scale;
        compute_angle_top; compute_angle_bottom;
        compute_wetted_height;
        }
    
gogo4 := {re; g5; 
        {r; u; V; g 20;} 3;
        u; V; U; g10; U; u; V; g100; U;g200;U;
        scale_val := scale;
        compute_angle_top; compute_angle_bottom;
        compute_wetted_height;
        }



// For saving coordinates before perturbation
save_coords := { foreach vertex vv do
                    { set vv.old_coord[1] x;
                      set vv.old_coord[2] y;
                      set vv.old_coord[3] z;
                    }
                }

// For restoring coordinates after perturbation
restore_coords := { foreach vertex vv do
                       { set vv.x old_coord[1];
                         set vv.y old_coord[2];
                         set vv.z old_coord[3];
                        }
                   }

// Force by central difference of energy minima
compute_force := { 
                /*force calculated by pressure and angle at bottom surface*/
                force2 := (((body[1].pressure-ambient_pressure_value)*lower_area.value)- 
                            (lower_length.value*sin(pin_angle)))/2/pi;
                force1 := (((body[1].pressure-ambient_pressure_value)*upper_area.value)- 
                (upper_length6.value*cos(abs((angle6*pi/180)-FA)))-
                (upper_length7.value*cos(abs((angle7*pi/180)-SA)))-
                (upper_length8.value*cos(abs((angle8*pi/180)-BA)))-
                (upper_length9.value*cos(abs((angle9*pi/180)-SA))))/2/pi; //top
//                save_coords;
//                dheight := 0.001;
//                //new_height := height - dheight;
//                //change_height;
//                set vertex z z-dheight where not on_constraint 14;
//                height := height - dheight;
//                optimize 1; 
//                g100;
//                lo_energy := total_energy;
//                restore_coords;
//                //new_height := height + 2*dheight;
//                //change_height;
//                set vertex z z+(2*dheight) where not on_constraint 14;
//                height := height + (2*dheight);
//                g100;
//                hi_energy := total_energy;
//                restore_coords;
//                height := height - dheight;
//                //change_height;
//                force1 := -(hi_energy - lo_energy)/2/dheight/2/pi;
                
                /*force1a := -(hi_energy - lo_energy)/2/dheight;*/
                
            }

 

//force-distance data        
get_fd := {
    //height_start := 0.001; height_end := 0.4; dh := 0.02; //SET HEIGHT SEQUENCE CHECK!
    outdir := sprintf "E:/Work/Surface Evolver/afm_pyramid/data/20220823_tipangle_sym_height0_ca30/";//TA_%0.0f/",a_dev; //CHECK OUTPUT DIRECTORY
    data_name := sprintf "data-CA_p%2.6g-TA_%0.0f",CA_p*180/pi,a_dev; //SET FILE NAME
            
            quiet on;        
            printf "Contact_Radius:\tBottom_Angle:\tForce_Eng:\tForce_Calc:\tScale\n";
               
//            num := 1+abs((height_end-height_start)/dh);
//            if height_end > height_start then {h_step := dh;} else {h_step := -dh;};

            // save data            
            outname := sprintf "%s%s.txt",outdir,data_name;
            
        if Rs == 1.0 then {printf "Contact_Radius\tHeight\tForce_Eng\tForce_Calc\t"
            "Bottom_Angle\tTop_Angle\tSide_Angle\tFront_Angle\tBack_Angle\tCone_Angle\tTilt_Angle\t"
            "Energy\tArea\tScale\tVolume\tPressure\tBottom_Length\t"
        "Top_Length\tBottom_Area\tTop_Area\tMean_curvature\t"
    "Bottom_Angle_Calc\tTop_Angle6\tTop_Angle7\tTop_Angle8\tTop_Angle9\tAverage Wetted Height\tInitial_guess_height\n">> outname;} 
            else {printf "";};
//                   printf "Contact_Radius\tHeight\tForce_Eng\tForce_Calc\t"
//                            "Bottom_Angle\tTop_Angle\tSide_Angle\tFront_Angle\tBack_Angle\tTilt_Angle\t"
//                           "Energy\tArea\tScale\tVolume\tPressure\tBottom_Length\t"
//                           "Top_Length\tBottom_Area\tTop_Area\tMean_curvature\t"
//                           "Bottom_Angle_Calc\tTop_Angle6\tTop_Angle7\tTop_Angle8\tTop_Angle9\n" >> outname;) 
//                           else {printf ".";}};

//            inx := 0;
            dataline := "";    
//            while inx < num do
//            {   
//                replace_load datafilename;
//                new_height := height_start+inx*h_step;
//                change_height;
//                inx++;
                
gogo5; //evolve routine
                //set edge color clear where on_constraint 6 or on_constraint 7 or on_constraint 8 or on_constraint 9;            

            //force1 := 0;
            //force2 := 0;
            compute_force; //calculate force
                printf "%g\t%#2.3g\t%-#2.3g\t%-#2.3g\t%-#20.15g\n", 
                        height,pin_angle*180/pi,force1,force2,scale_val;    
                    
                dataline:= sprintf "%-#2.3g\t%-#2.6g\t%-#20.15g\t%-#20.15g\t"
                                "%g\t%g\t%g\t%g\t%g\t%g\t%g\t"
                                "%-#20.15g\t%-#20.15g\t"
                                "%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t"
                                "%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t"
                                "%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#2.6g\n",
                                Rs,height,force1,force2,
                                CA_s*180/pi,CA_p*180/pi,SA*180/pi,FA*180/pi,BA*180/pi,a_dev,tilt*180/pi,
                                total_energy,total_area,scale_val, body[1].volume,
                                body[1].pressure,lower_length.value, 
                                upper_length.value,lower_area.value,upper_area.value,mean_c.value,
                                pin_angle*180/pi,angle6,angle7,angle8,angle9,wetted_height,w_init;
                 /* save data */
                 printf "%s",dataline >> outname;

                /* save dump file */
                dump sprintf "%s%s_dump-Rs%0.3f.dmp",outdir,data_name,Rs;

//            };
            quiet off;

          }


get_fd2 := {
    height_start := height; height_end := 0.2; dh := 0.005;
    outdir := sprintf "E:/Work/Surface Evolver/afm_pyramid/data/20220323_oltespa_fd/Rs_%0.1f/",Rs; //CHECK OUTPUT DIRECTORY
    data_name := sprintf "data-CA_p%2.6g-Rs_%0.1f",CA_p*180/pi,Rs; //SET FILE NAME
    quiet on;
    num := 1+abs((height_end-height_start)/dh);
    if height_end > height_start then {h_step := dh;} else {h_step := -dh;};
    inx := 0;
    gogo5;
    while inx < num do
        {   
            
            compute_force;
            // save data            
            outname := sprintf "%s%s.txt",outdir,data_name;
            
        if height == 0 then {printf "Contact_Radius\tHeight\tForce_Eng\tForce_Calc\t"
            "Bottom_Angle\tTop_Angle\tSide_Angle\tFront_Angle\tBack_Angle\tTilt_Angle\t"
            "Energy\tArea\tScale\tVolume\tPressure\tBottom_Length\t"
        "Top_Length\tBottom_Area\tTop_Area\tMean_curvature\t"
    "Bottom_Angle_Calc\tTop_Angle6\tTop_Angle7\tTop_Angle8\tTop_Angle9\tAverage Wetted Height\tInitial_guess_height\n">> outname;} 
            else {printf "";};
            
            printf "%g\t%#2.3g\t%-#2.3g\t%-#2.3g\t%-#20.15g\n", 
                        height,pin_angle*180/pi,force1,force2,scale_val;    
                    
                dataline:= sprintf "%-#2.3g\t%-#2.6g\t%-#20.15g\t%-#20.15g\t"
                                "%g\t%g\t%g\t%g\t%g\t%g\t"
                                "%-#20.15g\t%-#20.15g\t"
                                "%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t"
                                "%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t"
                                "%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#2.6g\n",
                                Rs,height,force1,force2,
                                CA_s*180/pi,CA_p*180/pi,SA*180/pi,FA*180/pi,BA*180/pi,tilt*180/pi,
                                total_energy,total_area,scale_val, body[1].volume,
                                body[1].pressure,lower_length.value, 
                                upper_length.value,lower_area.value,upper_area.value,mean_c.value,
                                pin_angle*180/pi,angle6,angle7,angle8,angle9,wetted_height,w_init;
                 /* save data */
                 printf "%s",dataline >> outname;

                /* save dump file */
                dump sprintf "%s%s_dump-h%0.3f.dmp",outdir,data_name,height;
                 
                set vertex z z+h_step where not on_constraint 14;
                height := height + h_step;
                U;g100;U;
                compute_angle_top; compute_angle_bottom;compute_wetted_height;
                inx++;
                
            
    };
    quiet off;
    

    


            }