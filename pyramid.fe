//pyramid.fe
// A triangular pyramid shaped tip in contact with a liquid drop
//Center of bottom suubstrate is the origin of the coordinate system, vertically below the tip
//Pyramid tip is at 'height' distance above surface
//Contact angle of liquid with pyramid and bottom substrate are given by angle_p and angle_s respectively

parameter height_start = 0.001
parameter height_end = 0.701
parameter dh = 0.1

parameter height = 0.001 // distance of pyramid tip from surface
parameter R_s = 2.7 //pinned radius at substrate (REMOVE CONTACT ANGLE ENERGY CONSTRAINT 1)
parameter w_top =  3 //height of dummy pyramid
parameter w_init = 1 //initial wetted height of the pyramid
parameter SA = 17.5 * pi/180 //Side angle of pyramid
parameter FA = 15 * pi/180 //Front angle of pyramid
parameter BA = 25 * pi/180 //Back angle of pyramid
parameter tilt = 0 * pi/180 //tilt pyramid around x-axis


parameter TENS = 1 //suface tension of liquid
parameter CA_s = 16 * pi/180 //liquid contact angle with surface (REMOVE PINNED CONTACT ONSTRAINT 14)
parameter CA_p = 16 * pi/180 //liquid contact angle with pyramid tip

gravity_constant 0  // start with gravity off

keep_macros

//rotate display
parameter alpha = 0*pi/180 //rotate view around z-axis
parameter beta = 10*pi/180 //rotate view around y-axis
parameter gamma = 0*pi/180 //rotate view around x-axis

//rotation matrix (https://en.wikipedia.org/wiki/Rotation_matrix)
view_matrix 
cos(alpha)*cos(beta) cos(alpha)*sin(beta)*sin(gamma)-sin(alpha)*cos(gamma) cos(alpha)*sin(beta)*cos(gamma)+sin(alpha)*sin(gamma) 0
sin(alpha)*cos(beta) sin(alpha)*sin(beta)*sin(gamma)+cos(alpha)*cos(gamma) sin(alpha)*sin(beta)*cos(gamma)-cos(alpha)*sin(gamma) 0
-sin(beta) cos(beta)*sin(gamma) cos(beta)*cos(gamma) -1
0 0 0 2

//surface energy of substrate and pyramid
#define TENS_s (-TENS*(cos(CA_s)))
#define TENS_p (-TENS*(cos(CA_p)))

/* COMPUTE QUANTITIES */

quantity upper_length info_only method edge_scalar_integral  // top contact length
scalar_integrand: 1

quantity lower_length info_only method edge_scalar_integral  // bottom contaact length
scalar_integrand: 1

quantity upper_area info_only method edge_vector_integral  // top contact area
vector_integrand:
q1: 0
q2: x
q3: 0

quantity lower_area info_only method edge_vector_integral  // bottom contact area
vector_integrand:
q1: 0
q2: x
q3: 0

//quantity mean_c info_only method mean_curvature_integral  // mean curvature


/* CONSTRAINTS */

constraint 1   // substrate face
formula: z = 0
//energy: //uncomment to consider oontact angle
//e1: 0
//e2: TENS_s * x
//e3: 0
//(y*cos(tilt)-z*sin(tilt))
//(y*sin(tilt)+z*cos(tilt))
constraint 14 // pinning at substrate
formula: x^2 + y^2 = R_s^2

//pyramid tip plane constraints
constraint 2 // face 6
//formula: y + (z-height)*tan(FA) = 0
formula: (y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(FA) = 0

constraint 3 // face 7
//formula: -x + (z-height)*tan(SA) = 0
formula: -x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA) = 0

constraint 4 // face 8
//formula: -y + (z-height)*tan(BA) = 0
formula: -(y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(BA) = 0

constraint 5 // face 9
//formula: x + (z-height)*tan(SA) = 0
formula: x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA) = 0

//keep liquid outside pyramid
constraint 6 nonpositive // face 1
//formula: y + (z-height)*tan(FA)
formula: (y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(FA)

constraint 7 nonpositive // face 2
//formula: -x + (z-height)*tan(SA)
formula: -x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA)

constraint 8 nonpositive // face 3
//formula: -y + (z-height)*tan(BA)
formula: -(y*cos(-tilt)-z*sin(-tilt)) + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(BA)

constraint 9 nonpositive // face 4
//formula: x + (z-height)*tan(SA)
formula: x + ((y*sin(-tilt)+z*cos(-tilt))-height)*tan(SA)

//pyramid tip constraints
constraint 10 
formula: x = 0

constraint 11 
formula: y = 0

constraint 12 
formula: z = height

constraint 13 nonnegative //keep liquid above substrate
formula: z

// for restoring after perturbation
define vertex attribute old_coord real[3]

/* INITIAL SHAPE SPECIFICATION */

vertices
//liquid bottom substrate (include pinning/contact angle constraints)
1 -R_s -R_s 0 constraint 1,13,14
2 R_s -R_s 0 constraint 1,13,14
3 R_s R_s 0 constraint 1,13,14
4 -R_s R_s 0 constraint 1,13,14
//5 -w_init*tan(SA) -w_init*tan(FA) height+w_init constraint 2,5 //pyramid contact line
//6 w_init*tan(SA) -w_init*tan(FA) height+w_init constraint 2,3
//7 w_init*tan(SA) w_init*tan(BA) height+w_init constraint 3,4
//8 -w_init*tan(SA) w_init*tan(BA) height+w_init constraint 4,5
 //pyramid contact line
5 -w_init*tan(SA) (-w_init*tan(FA))*cos(tilt)-(height+w_init)*sin(tilt) (-w_init*tan(FA))*sin(tilt)+(height+w_init)*cos(tilt)  constraint 2,5
6 w_init*tan(SA) (-w_init*tan(FA))*cos(tilt)-(height+w_init)*sin(tilt) (-w_init*tan(FA))*sin(tilt)+(height+w_init)*cos(tilt)  constraint 2,3
7 w_init*tan(SA) (w_init*tan(BA))*cos(tilt)-(height+w_init)*sin(tilt) (w_init*tan(BA))*sin(tilt)+(height+w_init)*cos(tilt)  constraint 3,4
8 -w_init*tan(SA) (w_init*tan(BA))*cos(tilt)-(height+w_init)*sin(tilt) (w_init*tan(BA))*sin(tilt)+(height+w_init)*cos(tilt)  constraint 4,5
9 0 0 height constraint 10,11,12
//pyramid
//10 -w_top*tan(SA) -w_top*tan(FA) height+w_top fixed
//11 w_top*tan(SA) -w_top*tan(FA) height+w_top fixed
//12 w_top*tan(SA) w_top*tan(BA) height+w_top fixed
//13 -w_top*tan(SA) w_top*tan(BA) height+w_top fixed
10 -w_top*tan(SA) (-w_top*tan(FA))*cos(tilt)-(height+w_top)*sin(tilt) (-w_top*tan(FA))*sin(tilt)+(height+w_top)*cos(tilt) fixed
11 w_top*tan(SA) (-w_top*tan(FA))*cos(tilt)-(height+w_top)*sin(tilt) (-w_top*tan(FA))*sin(tilt)+(height+w_top)*cos(tilt) fixed
12 w_top*tan(SA) (w_top*tan(BA))*cos(tilt)-(height+w_top)*sin(tilt) (w_top*tan(BA))*sin(tilt)+(height+w_top)*cos(tilt) fixed
13 -w_top*tan(SA) (w_top*tan(BA))*cos(tilt)-(height+w_top)*sin(tilt) (w_top*tan(BA))*sin(tilt)+(height+w_top)*cos(tilt) fixed


14 0 0 height fixed

edges
//liquid
1 1 2 constraint 1,14 lower_length lower_area //bottom substrate (include pinning/contact angle constraints)
2 2 3 constraint 1,14 lower_length lower_area
3 3 4 constraint 1,14 lower_length lower_area
4 4 1 constraint 1,14 lower_length lower_area
5 5 6 constraint 2 upper_length upper_area //pyramid top contact line
6 6 7 constraint 3 upper_length upper_area
7 7 8 constraint 4 upper_length upper_area
8 8 5 constraint 5 upper_length upper_area
9 1 5 constraint 13//liquid-air interface
10 2 6 constraint 13
11 3 7 constraint 13
12 4 8 constraint 13
13 9 5 constraint 2,5 //edge of pyramid tip
14 9 6 constraint 2,3
15 9 7 constraint 3,4
16 9 8 constraint 4,5
//pyramid
17 10 11 fixed no_refine 
18 11 12 fixed no_refine 
19 12 13 fixed no_refine 
20 13 10 fixed no_refine
21 14 10 fixed no_refine //edge of pyramid tip
22 14 11 fixed no_refine
23 14 12 fixed no_refine
24 14 13 fixed no_refine

faces
//liquid
1 1 10 -5 -9 constraint 6 tension TENS color yellow //air-liquid interface
2 2 11 -6 -10 constraint 7 tension TENS color yellow
3 3 12 -7 -11 constraint 8 tension TENS color yellow
4 4 9 -8 -12 constraint 9 tension TENS color yellow
//5 -1 -4 -3 -2 tension -0.8  constraint 1 color yellow //contact with substrate
6 13 5 -14 tension TENS_p constraint 2 color yellow //contact with pyramid tip
7 14 6 -15 tension TENS_p constraint 3 color yellow
8 15 7 -16 tension TENS_p constraint 4 color yellow
9 16 8 -13 tension TENS_p constraint 5 color yellow
//pyramid
10 21 17 -22 fixed no_refine tension 0 color red
11 22 18 -23 fixed no_refine tension 0 color red
12 23 19 -24 fixed no_refine tension 0 color red
13 24 20 -21 fixed no_refine tension 0 color red
14 17 18 19 20 fixed no_refine tension 0 color red

bodies
    1   1 2 3 4 6 7 8 9 volume 4*pi/3 density 1
    
//----------------------SCRIPT----------------------//

read


//compute contact angle of liquid at pinned contact line
compute_angle := {
    angle_sum := 0;
    ind := 0;
    foreach vertex vv where on_constraint 1 do
        {   
            if vv.vertex_normal[1]*vv.x > 0 or vv.vertex_normal[2]*vv.y > 0 then 
            {angle_sum := angle_sum+acos(vv.vertex_normal[3]);}
            else
            {angle_sum := angle_sum-acos(vv.vertex_normal[3]);};
            ind++;
        };
        pin_angle := (angle_sum/ind);//take average
        print pin_angle*180/pi;
        }

//change height
new_height := height //set new_height and run change_height
change_height := { dz := new_height - height; height := new_height;
               set vertex z z+dz where z > 0;
               recalc;
             }
           
re := { refine edges where on_constraint 1;}

//refine edge where length > .0048 and not no_refine;
gogo1 := {re;
    g5; r; g10; r; g20; r; g40; r; u; g100;
        scale_val := scale;
        compute_angle;
        }

//better evolve routine
gogo2 := {re; g5; 
        {r; u; V; g 10;} 3;
        g100;U;g100;U;
        scale_val := scale;
        compute_angle;
        }
    
gogo3 := {re; g5; 
    {r; u; V; g 10;} 4;
        g100;
        scale_val := scale;
        compute_angle;
        }
    
// For saving coordinates before perturbation
save_coords := { foreach vertex vv do
                    { set vv.old_coord[1] x;
                      set vv.old_coord[2] y;
                      set vv.old_coord[3] z;
                    }
                }

// For restoring coordinates after perturbation
restore_coords := { foreach vertex vv do
                       { set vv.x old_coord[1];
                         set vv.y old_coord[2];
                         set vv.z old_coord[3];
                        }
                   }

// Force by central difference of energy minima
compute_force := { save_coords;
                dheight := 0.000001;
                new_height := height - dheight;
                change_height;
                optimize 1; 
                g100;
                lo_energy := total_energy;
                restore_coords;
                new_height := height + 2*dheight;
                change_height;
                g100;
                hi_energy := total_energy;
                restore_coords;
                new_height := height - dheight;
                change_height;
                force1 := -(hi_energy - lo_energy)/2/dheight/2/pi;
                /*force calculated by pressure and angle at bottom surface*/
                force2 := (((body[1].pressure-ambient_pressure_value)*lower_area.value)- 
                            (lower_length.value*sin(pin_angle)))/2/pi;
                /*force1a := -(hi_energy - lo_energy)/2/dheight;*/
                printf "%-#2.6g\t%-#2.3g\t%-#2.3g\t%-#20.15g\n", 
                height,force1,force2,scale_val;
            }

           
        //force-distance data        
curve := {
        quiet on;        
        printf "Height:\tForce_Eng:\tForce_Calc:\tScale\n";
        
        num := 1+abs((height_end-height_start)/dh);
        if height_end > height_start then {h_step := dh;} else {h_step := -dh;};

        // save data
        outdir := "C:/Users/adwait/Desktop/Surface Evolver/afm/data/"; //CHECK OUTPUT DIRECTORY
        params := "data";
        outname := sprintf "%sdata-%s_hi%2.6g_hf%2.6g.txt",outdir,
                   params,height_start,height_end;
                   printf "Bottom_Angle\tContact_Radius\t"
                "Height\tForce\tForce_Calc\t"
               "Energy\tArea\tScale\tVolume\tPressure\tBottom_Length\t"
               "Top_Length\tBottom_Area\tTop_Area\t"
               "Pinning_Angle\n"
                >> outname;
                //local inx;
        inx := 0;
        dataline := "";    
        while inx < num do
        {   
            replace_load datafilename;
            new_height := height_start+inx*h_step;
            change_height;
            inx++;
            
        gogo3; //evolve
            //set edge color clear where on_constraint pinned;            

            compute_force; //calculate force
            
            
            dataline:= sprintf "%g\t%-#2.3g\t"
                            "%-#2.6g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t"
                            "%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t%-#20.15g\t"
                            "%-#20.15g\t%-#20.15g\t%-#20.15g\n", 
                            CA_s*180/pi,R_s,
                            height,force1,force2,total_energy,total_area,scale_val, body[1].volume,
                            body[1].pressure,lower_length.value,upper_length.value,lower_area.value, 
                            upper_area.value,pin_angle*180/pi;
             /* save data */
             printf "%s",dataline >> outname;

            /* save dump file */
            dump sprintf "%s%s_dump%03u-h%2.6g.dmp",outdir,
                        params,inx,height;

        };
        quiet off;

        }

